//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `a`.
    static let a = Rswift.ImageResource(bundle: R.hostingBundle, name: "a")
    /// Image `b`.
    static let b = Rswift.ImageResource(bundle: R.hostingBundle, name: "b")
    /// Image `c`.
    static let c = Rswift.ImageResource(bundle: R.hostingBundle, name: "c")
    /// Image `d`.
    static let d = Rswift.ImageResource(bundle: R.hostingBundle, name: "d")
    /// Image `e`.
    static let e = Rswift.ImageResource(bundle: R.hostingBundle, name: "e")
    
    /// `UIImage(named: "a", bundle: ..., traitCollection: ...)`
    static func a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.a, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "b", bundle: ..., traitCollection: ...)`
    static func b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "c", bundle: ..., traitCollection: ...)`
    static func c(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.c, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "d", bundle: ..., traitCollection: ...)`
    static func d(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.d, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "e", bundle: ..., traitCollection: ...)`
    static func e(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.e, compatibleWith: traitCollection)
    }
    
    /// This `R.image.chat` struct is generated, and contains static references to 2 images.
    struct chat {
      /// Image `chat_bubble_received`.
      static let chat_bubble_received = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat/chat_bubble_received")
      /// Image `chat_bubble_sent`.
      static let chat_bubble_sent = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat/chat_bubble_sent")
      
      /// `UIImage(named: "chat_bubble_received", bundle: ..., traitCollection: ...)`
      static func chat_bubble_received(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.chat.chat_bubble_received, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "chat_bubble_sent", bundle: ..., traitCollection: ...)`
      static func chat_bubble_sent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.chat.chat_bubble_sent, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.common` struct is generated, and contains static references to 15 images.
    struct common {
      /// Image `arrow_down`.
      static let arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/arrow_down")
      /// Image `arrow_right`.
      static let arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/arrow_right")
      /// Image `arrow_up`.
      static let arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/arrow_up")
      /// Image `avatarPlaceholder`.
      static let avatarPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/avatarPlaceholder")
      /// Image `cellEnclosure`.
      static let cellEnclosure = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/cellEnclosure")
      /// Image `commentsIcon`.
      static let commentsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/commentsIcon")
      /// Image `facebookButton`.
      static let facebookButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/facebookButton")
      /// Image `gradientButton`.
      static let gradientButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/gradientButton")
      /// Image `gradient`.
      static let gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/gradient")
      /// Image `ic_more`.
      static let ic_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/ic_more")
      /// Image `likesIcon`.
      static let likesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/likesIcon")
      /// Image `markerIcon`.
      static let markerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/markerIcon")
      /// Image `proMarkerIcon`.
      static let proMarkerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/proMarkerIcon")
      /// Image `switchOff`.
      static let switchOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/switchOff")
      /// Image `switchOn`.
      static let switchOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/switchOn")
      
      /// `UIImage(named: "arrow_down", bundle: ..., traitCollection: ...)`
      static func arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.arrow_down, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "arrow_right", bundle: ..., traitCollection: ...)`
      static func arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.arrow_right, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "arrow_up", bundle: ..., traitCollection: ...)`
      static func arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.arrow_up, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatarPlaceholder", bundle: ..., traitCollection: ...)`
      static func avatarPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.avatarPlaceholder, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "cellEnclosure", bundle: ..., traitCollection: ...)`
      static func cellEnclosure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.cellEnclosure, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "commentsIcon", bundle: ..., traitCollection: ...)`
      static func commentsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.commentsIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "facebookButton", bundle: ..., traitCollection: ...)`
      static func facebookButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.facebookButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "gradient", bundle: ..., traitCollection: ...)`
      static func gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.gradient, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "gradientButton", bundle: ..., traitCollection: ...)`
      static func gradientButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.gradientButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "ic_more", bundle: ..., traitCollection: ...)`
      static func ic_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.ic_more, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "likesIcon", bundle: ..., traitCollection: ...)`
      static func likesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.likesIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "markerIcon", bundle: ..., traitCollection: ...)`
      static func markerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.markerIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "proMarkerIcon", bundle: ..., traitCollection: ...)`
      static func proMarkerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.proMarkerIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "switchOff", bundle: ..., traitCollection: ...)`
      static func switchOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.switchOff, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "switchOn", bundle: ..., traitCollection: ...)`
      static func switchOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.switchOn, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.favourites` struct is generated, and contains static references to 2 images.
    struct favourites {
      /// Image `heart_default`.
      static let heart_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favourites/heart_default")
      /// Image `heart_hl`.
      static let heart_hl = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favourites/heart_hl")
      
      /// `UIImage(named: "heart_default", bundle: ..., traitCollection: ...)`
      static func heart_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.favourites.heart_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "heart_hl", bundle: ..., traitCollection: ...)`
      static func heart_hl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.favourites.heart_hl, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.main` struct is generated, and contains static references to 1 images.
    struct main {
      /// Image `logo`.
      static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Main/logo")
      
      /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
      static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.main.logo, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.navbar` struct is generated, and contains static references to 1 images.
    struct navbar {
      /// Image `backButton`.
      static let backButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Navbar/backButton")
      
      /// `UIImage(named: "backButton", bundle: ..., traitCollection: ...)`
      static func backButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.navbar.backButton, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.onboarding` struct is generated, and contains static references to 3 images.
    struct onboarding {
      /// Image `screen1`.
      static let screen1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/screen1")
      /// Image `screen2`.
      static let screen2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/screen2")
      /// Image `screen3`.
      static let screen3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/screen3")
      
      /// `UIImage(named: "screen1", bundle: ..., traitCollection: ...)`
      static func screen1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.screen1, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "screen2", bundle: ..., traitCollection: ...)`
      static func screen2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.screen2, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "screen3", bundle: ..., traitCollection: ...)`
      static func screen3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.screen3, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.profile` struct is generated, and contains static references to 21 images.
    struct profile {
      /// Image `addButton`.
      static let addButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/addButton")
      /// Image `becomeProButton`.
      static let becomeProButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/becomeProButton")
      /// Image `commentsIcon`.
      static let commentsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/commentsIcon")
      /// Image `editButton`.
      static let editButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/editButton")
      /// Image `gradientButton`.
      static let gradientButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/gradientButton")
      /// Image `heartHL`.
      static let heartHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/heartHL")
      /// Image `heart_default`.
      static let heart_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/heart_default")
      /// Image `photoCommentsIcon`.
      static let photoCommentsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/photoCommentsIcon")
      /// Image `photoLikesIcon`.
      static let photoLikesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/photoLikesIcon")
      /// Image `photoPlaceholder`.
      static let photoPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/photoPlaceholder")
      /// Image `popularImage`.
      static let popularImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/popularImage")
      /// Image `proBadge`.
      static let proBadge = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/proBadge")
      /// Image `proBtnSmall`.
      static let proBtnSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/proBtnSmall")
      /// Image `proIcon`.
      static let proIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/proIcon")
      /// Image `profileGridViewDefault`.
      static let profileGridViewDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/profileGridViewDefault")
      /// Image `profileGridViewHL`.
      static let profileGridViewHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/profileGridViewHL")
      /// Image `profileListViewDefault`.
      static let profileListViewDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/profileListViewDefault")
      /// Image `profileListViewHL`.
      static let profileListViewHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/profileListViewHL")
      /// Image `searchTextField`.
      static let searchTextField = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/searchTextField")
      /// Image `videocam`.
      static let videocam = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/videocam")
      /// Image `whiteButton`.
      static let whiteButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/whiteButton")
      
      /// `UIImage(named: "addButton", bundle: ..., traitCollection: ...)`
      static func addButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.addButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "becomeProButton", bundle: ..., traitCollection: ...)`
      static func becomeProButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.becomeProButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "commentsIcon", bundle: ..., traitCollection: ...)`
      static func commentsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.commentsIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "editButton", bundle: ..., traitCollection: ...)`
      static func editButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.editButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "gradientButton", bundle: ..., traitCollection: ...)`
      static func gradientButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.gradientButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "heartHL", bundle: ..., traitCollection: ...)`
      static func heartHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.heartHL, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "heart_default", bundle: ..., traitCollection: ...)`
      static func heart_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.heart_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "photoCommentsIcon", bundle: ..., traitCollection: ...)`
      static func photoCommentsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.photoCommentsIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "photoLikesIcon", bundle: ..., traitCollection: ...)`
      static func photoLikesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.photoLikesIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "photoPlaceholder", bundle: ..., traitCollection: ...)`
      static func photoPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.photoPlaceholder, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "popularImage", bundle: ..., traitCollection: ...)`
      static func popularImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.popularImage, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "proBadge", bundle: ..., traitCollection: ...)`
      static func proBadge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.proBadge, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "proBtnSmall", bundle: ..., traitCollection: ...)`
      static func proBtnSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.proBtnSmall, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "proIcon", bundle: ..., traitCollection: ...)`
      static func proIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.proIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "profileGridViewDefault", bundle: ..., traitCollection: ...)`
      static func profileGridViewDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.profileGridViewDefault, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "profileGridViewHL", bundle: ..., traitCollection: ...)`
      static func profileGridViewHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.profileGridViewHL, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "profileListViewDefault", bundle: ..., traitCollection: ...)`
      static func profileListViewDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.profileListViewDefault, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "profileListViewHL", bundle: ..., traitCollection: ...)`
      static func profileListViewHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.profileListViewHL, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "searchTextField", bundle: ..., traitCollection: ...)`
      static func searchTextField(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.searchTextField, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "videocam", bundle: ..., traitCollection: ...)`
      static func videocam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.videocam, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "whiteButton", bundle: ..., traitCollection: ...)`
      static func whiteButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.whiteButton, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.search` struct is generated, and contains static references to 7 images.
    struct search {
      /// Image `badge_off`.
      static let badge_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search/badge_off")
      /// Image `badge_on`.
      static let badge_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search/badge_on")
      /// Image `fbtn`.
      static let fbtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search/fbtn")
      /// Image `filterButton`.
      static let filterButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search/filterButton")
      /// Image `listButton`.
      static let listButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search/listButton")
      /// Image `mapButton`.
      static let mapButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search/mapButton")
      /// Image `plusButton`.
      static let plusButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search/plusButton")
      
      /// `UIImage(named: "badge_off", bundle: ..., traitCollection: ...)`
      static func badge_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.search.badge_off, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "badge_on", bundle: ..., traitCollection: ...)`
      static func badge_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.search.badge_on, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "fbtn", bundle: ..., traitCollection: ...)`
      static func fbtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.search.fbtn, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "filterButton", bundle: ..., traitCollection: ...)`
      static func filterButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.search.filterButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "listButton", bundle: ..., traitCollection: ...)`
      static func listButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.search.listButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "mapButton", bundle: ..., traitCollection: ...)`
      static func mapButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.search.mapButton, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "plusButton", bundle: ..., traitCollection: ...)`
      static func plusButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.search.plusButton, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.selection` struct is generated, and contains static references to 4 images.
    struct selection {
      /// Image `customerActiveBtn`.
      static let customerActiveBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selection/customerActiveBtn")
      /// Image `customerDefaultBtn`.
      static let customerDefaultBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selection/customerDefaultBtn")
      /// Image `freelanceActiveBtn`.
      static let freelanceActiveBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selection/freelanceActiveBtn")
      /// Image `freelanceDefaultBtn`.
      static let freelanceDefaultBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selection/freelanceDefaultBtn")
      
      /// `UIImage(named: "customerActiveBtn", bundle: ..., traitCollection: ...)`
      static func customerActiveBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.selection.customerActiveBtn, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "customerDefaultBtn", bundle: ..., traitCollection: ...)`
      static func customerDefaultBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.selection.customerDefaultBtn, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "freelanceActiveBtn", bundle: ..., traitCollection: ...)`
      static func freelanceActiveBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.selection.freelanceActiveBtn, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "freelanceDefaultBtn", bundle: ..., traitCollection: ...)`
      static func freelanceDefaultBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.selection.freelanceDefaultBtn, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.setupPropfile` struct is generated, and contains static references to 3 images.
    struct setupPropfile {
      /// Image `setupProfileCodeIcon`.
      static let setupProfileCodeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SetupPropfile/setupProfileCodeIcon")
      /// Image `setupProfilePhotoBtn`.
      static let setupProfilePhotoBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "SetupPropfile/setupProfilePhotoBtn")
      /// Image `setupProfilePhotoUnderlay`.
      static let setupProfilePhotoUnderlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "SetupPropfile/setupProfilePhotoUnderlay")
      
      /// `UIImage(named: "setupProfileCodeIcon", bundle: ..., traitCollection: ...)`
      static func setupProfileCodeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.setupPropfile.setupProfileCodeIcon, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "setupProfilePhotoBtn", bundle: ..., traitCollection: ...)`
      static func setupProfilePhotoBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.setupPropfile.setupProfilePhotoBtn, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "setupProfilePhotoUnderlay", bundle: ..., traitCollection: ...)`
      static func setupProfilePhotoUnderlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.setupPropfile.setupProfilePhotoUnderlay, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.subscription` struct is generated, and contains static references to 4 images.
    struct subscription {
      /// Image `bg`.
      static let bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription/bg")
      /// Image `popular_mark`.
      static let popular_mark = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription/popular_mark")
      /// Image `purchase_bg`.
      static let purchase_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription/purchase_bg")
      /// Image `trial_bg`.
      static let trial_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription/trial_bg")
      
      /// `UIImage(named: "bg", bundle: ..., traitCollection: ...)`
      static func bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.subscription.bg, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "popular_mark", bundle: ..., traitCollection: ...)`
      static func popular_mark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.subscription.popular_mark, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "purchase_bg", bundle: ..., traitCollection: ...)`
      static func purchase_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.subscription.purchase_bg, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "trial_bg", bundle: ..., traitCollection: ...)`
      static func trial_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.subscription.trial_bg, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.tabbar` struct is generated, and contains static references to 9 images.
    struct tabbar {
      /// Image `chat_alert`.
      static let chat_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/chat_alert")
      /// Image `chat_default`.
      static let chat_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/chat_default")
      /// Image `chat_hl`.
      static let chat_hl = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/chat_hl")
      /// Image `favourites_default`.
      static let favourites_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/favourites_default")
      /// Image `favourites_hl`.
      static let favourites_hl = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/favourites_hl")
      /// Image `profile_default`.
      static let profile_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/profile_default")
      /// Image `profile_hl`.
      static let profile_hl = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/profile_hl")
      /// Image `search_default`.
      static let search_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/search_default")
      /// Image `search_hl`.
      static let search_hl = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabbar/search_hl")
      
      /// `UIImage(named: "chat_alert", bundle: ..., traitCollection: ...)`
      static func chat_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.chat_alert, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "chat_default", bundle: ..., traitCollection: ...)`
      static func chat_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.chat_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "chat_hl", bundle: ..., traitCollection: ...)`
      static func chat_hl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.chat_hl, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "favourites_default", bundle: ..., traitCollection: ...)`
      static func favourites_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.favourites_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "favourites_hl", bundle: ..., traitCollection: ...)`
      static func favourites_hl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.favourites_hl, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "profile_default", bundle: ..., traitCollection: ...)`
      static func profile_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.profile_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "profile_hl", bundle: ..., traitCollection: ...)`
      static func profile_hl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.profile_hl, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "search_default", bundle: ..., traitCollection: ...)`
      static func search_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.search_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "search_hl", bundle: ..., traitCollection: ...)`
      static func search_hl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabbar.search_hl, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ChatCell`.
    static let chatCell = _R.nib._ChatCell()
    /// Nib `PhotoModeReusableView`.
    static let photoModeReusableView = _R.nib._PhotoModeReusableView()
    /// Nib `SelectorButtonView`.
    static let selectorButtonView = _R.nib._SelectorButtonView()
    
    /// `UINib(name: "ChatCell", in: bundle)`
    static func chatCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatCell)
    }
    
    /// `UINib(name: "PhotoModeReusableView", in: bundle)`
    static func photoModeReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoModeReusableView)
    }
    
    /// `UINib(name: "SelectorButtonView", in: bundle)`
    static func selectorButtonView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectorButtonView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ChatCell`.
    static let chatCell: Rswift.ReuseIdentifier<ChatCell> = Rswift.ReuseIdentifier(identifier: "ChatCell")
    /// Reuse identifier `ChatListCell`.
    static let chatListCell: Rswift.ReuseIdentifier<ChatListCell> = Rswift.ReuseIdentifier(identifier: "ChatListCell")
    /// Reuse identifier `FavouritesCell`.
    static let favouritesCell: Rswift.ReuseIdentifier<FavouritesCell> = Rswift.ReuseIdentifier(identifier: "FavouritesCell")
    /// Reuse identifier `LocationTitleView`.
    static let locationTitleView: Rswift.ReuseIdentifier<LocationHeaderReusableView> = Rswift.ReuseIdentifier(identifier: "LocationTitleView")
    /// Reuse identifier `PhotoModeReusableView`.
    static let photoModeReusableView: Rswift.ReuseIdentifier<PhotoModeReusableView> = Rswift.ReuseIdentifier(identifier: "PhotoModeReusableView")
    /// Reuse identifier `UserGridCell`.
    static let userGridCell: Rswift.ReuseIdentifier<UserGridCell> = Rswift.ReuseIdentifier(identifier: "UserGridCell")
    /// Reuse identifier `UserHeaderCell`.
    static let userHeaderCell: Rswift.ReuseIdentifier<UserHeaderCell> = Rswift.ReuseIdentifier(identifier: "UserHeaderCell")
    /// Reuse identifier `UserLocationCell`.
    static let userLocationCell: Rswift.ReuseIdentifier<UserLocationCell> = Rswift.ReuseIdentifier(identifier: "UserLocationCell")
    /// Reuse identifier `UserPhotoGridCell`.
    static let userPhotoGridCell: Rswift.ReuseIdentifier<UserPhotoCell> = Rswift.ReuseIdentifier(identifier: "UserPhotoGridCell")
    /// Reuse identifier `UserPhotoListCell`.
    static let userPhotoListCell: Rswift.ReuseIdentifier<UserPhotoCell> = Rswift.ReuseIdentifier(identifier: "UserPhotoListCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 9 view controllers.
  struct segue {
    /// This struct is generated for `ChatListController`, and contains static references to 1 segues.
    struct chatListController {
      /// Segue identifier `chatController`.
      static let chatController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ChatListController, ChatController> = Rswift.StoryboardSegueIdentifier(identifier: "chatController")
      
      /// Optionally returns a typed version of segue `chatController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func chatController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ChatListController, ChatController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.chatListController.chatController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignUpEmailController`, and contains static references to 1 segues.
    struct signUpEmailController {
      /// Segue identifier `signUpStep2`.
      static let signUpStep2: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpEmailController, SignUpNameController> = Rswift.StoryboardSegueIdentifier(identifier: "signUpStep2")
      
      /// Optionally returns a typed version of segue `signUpStep2`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signUpStep2(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpEmailController, SignUpNameController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpEmailController.signUpStep2, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignUpNameController`, and contains static references to 1 segues.
    struct signUpNameController {
      /// Segue identifier `signUpStep3`.
      static let signUpStep3: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpNameController, SignUpProfileController> = Rswift.StoryboardSegueIdentifier(identifier: "signUpStep3")
      
      /// Optionally returns a typed version of segue `signUpStep3`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signUpStep3(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpNameController, SignUpProfileController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpNameController.signUpStep3, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignUpProfileController`, and contains static references to 1 segues.
    struct signUpProfileController {
      /// Segue identifier `signUpStep4`.
      static let signUpStep4: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpProfileController, SignUpLocationController> = Rswift.StoryboardSegueIdentifier(identifier: "signUpStep4")
      
      /// Optionally returns a typed version of segue `signUpStep4`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signUpStep4(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpProfileController, SignUpLocationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpProfileController.signUpStep4, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SubscriptionsController`, and contains static references to 2 segues.
    struct subscriptionsController {
      /// Segue identifier `showPrivacy`.
      static let showPrivacy: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SubscriptionsController, TextViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPrivacy")
      /// Segue identifier `showTerms`.
      static let showTerms: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SubscriptionsController, TextViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showTerms")
      
      /// Optionally returns a typed version of segue `showPrivacy`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPrivacy(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SubscriptionsController, TextViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.subscriptionsController.showPrivacy, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showTerms`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTerms(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SubscriptionsController, TextViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.subscriptionsController.showTerms, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TokenPurchaseController`, and contains static references to 2 segues.
    struct tokenPurchaseController {
      /// Segue identifier `showPrivacy`.
      static let showPrivacy: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TokenPurchaseController, TextViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPrivacy")
      /// Segue identifier `showTerms`.
      static let showTerms: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TokenPurchaseController, TextViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showTerms")
      
      /// Optionally returns a typed version of segue `showPrivacy`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPrivacy(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TokenPurchaseController, TextViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tokenPurchaseController.showPrivacy, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showTerms`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTerms(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TokenPurchaseController, TextViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tokenPurchaseController.showTerms, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserProfileController`, and contains static references to 3 segues.
    struct userProfileController {
      /// Segue identifier `showSubscription`.
      static let showSubscription: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserProfileController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showSubscription")
      /// Segue identifier `showTokens`.
      static let showTokens: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserProfileController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showTokens")
      /// Segue identifier `userProfileEdit`.
      static let userProfileEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserProfileController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "userProfileEdit")
      
      /// Optionally returns a typed version of segue `showSubscription`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSubscription(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserProfileController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userProfileController.showSubscription, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showTokens`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTokens(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserProfileController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userProfileController.showTokens, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `userProfileEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userProfileEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserProfileController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userProfileController.userProfileEdit, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserSearchController`, and contains static references to 2 segues.
    struct userSearchController {
      /// Segue identifier `userGridController`.
      static let userGridController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserSearchController, UserGridController> = Rswift.StoryboardSegueIdentifier(identifier: "userGridController")
      /// Segue identifier `userMapController`.
      static let userMapController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserSearchController, MapController> = Rswift.StoryboardSegueIdentifier(identifier: "userMapController")
      
      /// Optionally returns a typed version of segue `userGridController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userGridController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserSearchController, UserGridController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userSearchController.userGridController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `userMapController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userMapController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserSearchController, MapController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userSearchController.userMapController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserSettingsController`, and contains static references to 3 segues.
    struct userSettingsController {
      /// Segue identifier `privacySegue`.
      static let privacySegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserSettingsController, TextViewController> = Rswift.StoryboardSegueIdentifier(identifier: "privacySegue")
      /// Segue identifier `subscriptionSegue`.
      static let subscriptionSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserSettingsController, TextViewController> = Rswift.StoryboardSegueIdentifier(identifier: "subscriptionSegue")
      /// Segue identifier `termsSegue`.
      static let termsSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserSettingsController, TextViewController> = Rswift.StoryboardSegueIdentifier(identifier: "termsSegue")
      
      /// Optionally returns a typed version of segue `privacySegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func privacySegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserSettingsController, TextViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userSettingsController.privacySegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `subscriptionSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func subscriptionSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserSettingsController, TextViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userSettingsController.subscriptionSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `termsSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func termsSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserSettingsController, TextViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userSettingsController.termsSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `AuthReg`.
    static let authReg = _R.storyboard.authReg()
    /// Storyboard `Chat`.
    static let chat = _R.storyboard.chat()
    /// Storyboard `Favourites`.
    static let favourites = _R.storyboard.favourites()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `ProfileBig`.
    static let profileBig = _R.storyboard.profileBig()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Selection`.
    static let selection = _R.storyboard.selection()
    /// Storyboard `Start`.
    static let start = _R.storyboard.start()
    
    /// `UIStoryboard(name: "AuthReg", bundle: ...)`
    static func authReg(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authReg)
    }
    
    /// `UIStoryboard(name: "Chat", bundle: ...)`
    static func chat(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chat)
    }
    
    /// `UIStoryboard(name: "Favourites", bundle: ...)`
    static func favourites(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.favourites)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "ProfileBig", bundle: ...)`
    static func profileBig(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileBig)
    }
    
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    
    /// `UIStoryboard(name: "Selection", bundle: ...)`
    static func selection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.selection)
    }
    
    /// `UIStoryboard(name: "Start", bundle: ...)`
    static func start(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.start)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PhotoModeReusableView.validate()
    }
    
    struct _ChatCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChatCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatCell"
      let name = "ChatCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChatCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoModeReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PhotoModeReusableView
      
      let bundle = R.hostingBundle
      let identifier = "PhotoModeReusableView"
      let name = "PhotoModeReusableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotoModeReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoModeReusableView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Profile/profileListViewDefault", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/profileListViewDefault' is used in nib 'PhotoModeReusableView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/profileGridViewHL", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/profileGridViewHL' is used in nib 'PhotoModeReusableView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SelectorButtonView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SelectorButtonView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try chat.validate()
      try main.validate()
      try search.validate()
      try selection.validate()
      try authReg.validate()
      try favourites.validate()
      try start.validate()
      try profileBig.validate()
      try launchScreen.validate()
    }
    
    struct authReg: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SigninController
      
      let bundle = R.hostingBundle
      let createNewPasswordController = StoryboardViewControllerResource<CreateNewPasswordController>(identifier: "CreateNewPasswordController")
      let name = "AuthReg"
      let resetPasswordController = StoryboardViewControllerResource<ResetPasswordController>(identifier: "ResetPasswordController")
      let signUpEmailController = StoryboardViewControllerResource<SignUpEmailController>(identifier: "SignUpEmailController")
      let signUpEmailNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SignUpEmailNavigation")
      let signUpLocationController = StoryboardViewControllerResource<SignUpLocationController>(identifier: "SignUpLocationController")
      let signUpNameController = StoryboardViewControllerResource<SignUpNameController>(identifier: "SignUpNameController")
      let signUpNameNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SignUpNameNavigation")
      let signUpProfileController = StoryboardViewControllerResource<SignUpProfileController>(identifier: "SignUpProfileController")
      let signinController = StoryboardViewControllerResource<SigninController>(identifier: "SigninController")
      
      func createNewPasswordController(_: Void = ()) -> CreateNewPasswordController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createNewPasswordController)
      }
      
      func resetPasswordController(_: Void = ()) -> ResetPasswordController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordController)
      }
      
      func signUpEmailController(_: Void = ()) -> SignUpEmailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpEmailController)
      }
      
      func signUpEmailNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpEmailNavigation)
      }
      
      func signUpLocationController(_: Void = ()) -> SignUpLocationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpLocationController)
      }
      
      func signUpNameController(_: Void = ()) -> SignUpNameController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpNameController)
      }
      
      func signUpNameNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpNameNavigation)
      }
      
      func signUpProfileController(_: Void = ()) -> SignUpProfileController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpProfileController)
      }
      
      func signinController(_: Void = ()) -> SigninController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signinController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Main/logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Main/logo' is used in storyboard 'AuthReg', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SetupPropfile/setupProfileCodeIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SetupPropfile/setupProfileCodeIcon' is used in storyboard 'AuthReg', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/gradient") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/gradient' is used in storyboard 'AuthReg', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/avatarPlaceholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/avatarPlaceholder' is used in storyboard 'AuthReg', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/gradientButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/gradientButton' is used in storyboard 'AuthReg', but couldn't be loaded.") }
        if _R.storyboard.authReg().signUpNameNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpNameNavigation' could not be loaded from storyboard 'AuthReg' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.authReg().signUpEmailNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpEmailNavigation' could not be loaded from storyboard 'AuthReg' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.authReg().signUpEmailController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpEmailController' could not be loaded from storyboard 'AuthReg' as 'SignUpEmailController'.") }
        if _R.storyboard.authReg().createNewPasswordController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createNewPasswordController' could not be loaded from storyboard 'AuthReg' as 'CreateNewPasswordController'.") }
        if _R.storyboard.authReg().resetPasswordController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordController' could not be loaded from storyboard 'AuthReg' as 'ResetPasswordController'.") }
        if _R.storyboard.authReg().signUpLocationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpLocationController' could not be loaded from storyboard 'AuthReg' as 'SignUpLocationController'.") }
        if _R.storyboard.authReg().signUpNameController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpNameController' could not be loaded from storyboard 'AuthReg' as 'SignUpNameController'.") }
        if _R.storyboard.authReg().signUpProfileController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpProfileController' could not be loaded from storyboard 'AuthReg' as 'SignUpProfileController'.") }
        if _R.storyboard.authReg().signinController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signinController' could not be loaded from storyboard 'AuthReg' as 'SigninController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct chat: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let chatController = StoryboardViewControllerResource<ChatController>(identifier: "ChatController")
      let name = "Chat"
      
      func chatController(_: Void = ()) -> ChatController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Navbar/backButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Navbar/backButton' is used in storyboard 'Chat', but couldn't be loaded.") }
        if _R.storyboard.chat().chatController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatController' could not be loaded from storyboard 'Chat' as 'ChatController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct favourites: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Favourites"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Profile/heartHL") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/heartHL' is used in storyboard 'Favourites', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Main/logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Main/logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainTabbarController
      
      let bundle = R.hostingBundle
      let main = StoryboardViewControllerResource<MainTabbarController>(identifier: "Main")
      let name = "Main"
      
      func main(_: Void = ()) -> MainTabbarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: main)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Tabbar/favourites_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Tabbar/favourites_default' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Tabbar/search_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Tabbar/search_default' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Tabbar/chat_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Tabbar/chat_default' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().main() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'Main' as 'MainTabbarController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profileBig: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let alienInformationController = StoryboardViewControllerResource<AlienInformationController>(identifier: "AlienInformationController")
      let alienProfileNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "AlienProfileNavigation")
      let bundle = R.hostingBundle
      let name = "ProfileBig"
      let subscriptionNavController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "subscriptionNavController")
      let subscriptionsController = StoryboardViewControllerResource<SubscriptionsController>(identifier: "SubscriptionsController")
      let tokenPurchaseController = StoryboardViewControllerResource<TokenPurchaseController>(identifier: "TokenPurchaseController")
      let userAboutMeController = StoryboardViewControllerResource<UserAboutMeController>(identifier: "UserAboutMeController")
      let userProfileController = StoryboardViewControllerResource<UserProfileController>(identifier: "UserProfileController")
      let userSettingsController = StoryboardViewControllerResource<UserSettingsController>(identifier: "UserSettingsController")
      let userStatsController = StoryboardViewControllerResource<UserStatsController>(identifier: "UserStatsController")
      
      func alienInformationController(_: Void = ()) -> AlienInformationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alienInformationController)
      }
      
      func alienProfileNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alienProfileNavigation)
      }
      
      func subscriptionNavController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subscriptionNavController)
      }
      
      func subscriptionsController(_: Void = ()) -> SubscriptionsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subscriptionsController)
      }
      
      func tokenPurchaseController(_: Void = ()) -> TokenPurchaseController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tokenPurchaseController)
      }
      
      func userAboutMeController(_: Void = ()) -> UserAboutMeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userAboutMeController)
      }
      
      func userProfileController(_: Void = ()) -> UserProfileController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileController)
      }
      
      func userSettingsController(_: Void = ()) -> UserSettingsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSettingsController)
      }
      
      func userStatsController(_: Void = ()) -> UserStatsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userStatsController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "subscription/popular_mark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'subscription/popular_mark' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Search/badge_off") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search/badge_off' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SetupPropfile/setupProfileCodeIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SetupPropfile/setupProfileCodeIcon' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "subscription/trial_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'subscription/trial_bg' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/avatarPlaceholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/avatarPlaceholder' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/editButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/editButton' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/photoCommentsIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/photoCommentsIcon' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/videocam") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/videocam' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/addButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/addButton' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Favourites/heart_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Favourites/heart_default' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Search/badge_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search/badge_on' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/arrow_down") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/arrow_down' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/photoLikesIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/photoLikesIcon' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/proIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/proIcon' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Navbar/backButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Navbar/backButton' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/ic_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/ic_more' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/gradient") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/gradient' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/becomeProButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/becomeProButton' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/heartHL") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/heartHL' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "subscription/purchase_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'subscription/purchase_bg' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/markerIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/markerIcon' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/cellEnclosure") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/cellEnclosure' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/commentsIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/commentsIcon' is used in storyboard 'ProfileBig', but couldn't be loaded.") }
        if _R.storyboard.profileBig().subscriptionNavController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subscriptionNavController' could not be loaded from storyboard 'ProfileBig' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.profileBig().tokenPurchaseController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tokenPurchaseController' could not be loaded from storyboard 'ProfileBig' as 'TokenPurchaseController'.") }
        if _R.storyboard.profileBig().userSettingsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSettingsController' could not be loaded from storyboard 'ProfileBig' as 'UserSettingsController'.") }
        if _R.storyboard.profileBig().alienInformationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alienInformationController' could not be loaded from storyboard 'ProfileBig' as 'AlienInformationController'.") }
        if _R.storyboard.profileBig().userAboutMeController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userAboutMeController' could not be loaded from storyboard 'ProfileBig' as 'UserAboutMeController'.") }
        if _R.storyboard.profileBig().userStatsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userStatsController' could not be loaded from storyboard 'ProfileBig' as 'UserStatsController'.") }
        if _R.storyboard.profileBig().subscriptionsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subscriptionsController' could not be loaded from storyboard 'ProfileBig' as 'SubscriptionsController'.") }
        if _R.storyboard.profileBig().alienProfileNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alienProfileNavigation' could not be loaded from storyboard 'ProfileBig' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.profileBig().userProfileController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileController' could not be loaded from storyboard 'ProfileBig' as 'UserProfileController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct search: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let filterController = StoryboardViewControllerResource<FilterController>(identifier: "FilterController")
      let mapController = StoryboardViewControllerResource<MapController>(identifier: "MapController")
      let name = "Search"
      let photoPreviewController = StoryboardViewControllerResource<PhotoPreviewController>(identifier: "PhotoPreviewController")
      let userGridController = StoryboardViewControllerResource<UserGridController>(identifier: "UserGridController")
      let userSearchController = StoryboardViewControllerResource<UserSearchController>(identifier: "UserSearchController")
      
      func filterController(_: Void = ()) -> FilterController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterController)
      }
      
      func mapController(_: Void = ()) -> MapController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapController)
      }
      
      func photoPreviewController(_: Void = ()) -> PhotoPreviewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: photoPreviewController)
      }
      
      func userGridController(_: Void = ()) -> UserGridController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userGridController)
      }
      
      func userSearchController(_: Void = ()) -> UserSearchController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSearchController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search/badge_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search/badge_on' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Search/listButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search/listButton' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Search/filterButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search/filterButton' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/gradient") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/gradient' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/avatarPlaceholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/avatarPlaceholder' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/gradientButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/gradientButton' is used in storyboard 'Search', but couldn't be loaded.") }
        if _R.storyboard.search().userSearchController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSearchController' could not be loaded from storyboard 'Search' as 'UserSearchController'.") }
        if _R.storyboard.search().mapController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapController' could not be loaded from storyboard 'Search' as 'MapController'.") }
        if _R.storyboard.search().filterController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterController' could not be loaded from storyboard 'Search' as 'FilterController'.") }
        if _R.storyboard.search().photoPreviewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'photoPreviewController' could not be loaded from storyboard 'Search' as 'PhotoPreviewController'.") }
        if _R.storyboard.search().userGridController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userGridController' could not be loaded from storyboard 'Search' as 'UserGridController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct selection: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Selection"
      let selectLocationController = StoryboardViewControllerResource<SelectLocationController>(identifier: "SelectLocationController")
      let selection = StoryboardViewControllerResource<SelectionController>(identifier: "Selection")
      
      func selectLocationController(_: Void = ()) -> SelectLocationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectLocationController)
      }
      
      func selection(_: Void = ()) -> SelectionController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selection)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Selection/freelanceDefaultBtn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Selection/freelanceDefaultBtn' is used in storyboard 'Selection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Selection/customerActiveBtn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Selection/customerActiveBtn' is used in storyboard 'Selection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Selection/customerDefaultBtn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Selection/customerDefaultBtn' is used in storyboard 'Selection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Selection/freelanceActiveBtn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Selection/freelanceActiveBtn' is used in storyboard 'Selection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Main/logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Main/logo' is used in storyboard 'Selection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/gradientButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/gradientButton' is used in storyboard 'Selection', but couldn't be loaded.") }
        if _R.storyboard.selection().selection() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selection' could not be loaded from storyboard 'Selection' as 'SelectionController'.") }
        if _R.storyboard.selection().selectLocationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectLocationController' could not be loaded from storyboard 'Selection' as 'SelectLocationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct start: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = StartController
      
      let bundle = R.hostingBundle
      let name = "Start"
      let onboardingController = StoryboardViewControllerResource<OnboardingController>(identifier: "OnboardingController")
      let onboardingItemController = StoryboardViewControllerResource<OnboardingItemController>(identifier: "OnboardingItemController")
      let pageVC = StoryboardViewControllerResource<UIKit.UIPageViewController>(identifier: "pageVC")
      let startController = StoryboardViewControllerResource<StartController>(identifier: "StartController")
      let startVideoController = StoryboardViewControllerResource<StartVideoController>(identifier: "StartVideoController")
      
      func onboardingController(_: Void = ()) -> OnboardingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingController)
      }
      
      func onboardingItemController(_: Void = ()) -> OnboardingItemController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingItemController)
      }
      
      func pageVC(_: Void = ()) -> UIKit.UIPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageVC)
      }
      
      func startController(_: Void = ()) -> StartController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startController)
      }
      
      func startVideoController(_: Void = ()) -> StartVideoController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startVideoController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/arrow_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/arrow_right' is used in storyboard 'Start', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Main/logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Main/logo' is used in storyboard 'Start', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Onboarding/screen1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Onboarding/screen1' is used in storyboard 'Start', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/gradient") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/gradient' is used in storyboard 'Start', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/avatarPlaceholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/avatarPlaceholder' is used in storyboard 'Start', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/gradientButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/gradientButton' is used in storyboard 'Start', but couldn't be loaded.") }
        if _R.storyboard.start().onboardingItemController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingItemController' could not be loaded from storyboard 'Start' as 'OnboardingItemController'.") }
        if _R.storyboard.start().onboardingController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingController' could not be loaded from storyboard 'Start' as 'OnboardingController'.") }
        if _R.storyboard.start().startController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startController' could not be loaded from storyboard 'Start' as 'StartController'.") }
        if _R.storyboard.start().pageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageVC' could not be loaded from storyboard 'Start' as 'UIKit.UIPageViewController'.") }
        if _R.storyboard.start().startVideoController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startVideoController' could not be loaded from storyboard 'Start' as 'StartVideoController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
